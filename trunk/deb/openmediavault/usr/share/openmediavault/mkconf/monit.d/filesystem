#!/bin/sh
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2013 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_MONIT_CONFIG=${OMV_MONIT_CONFIG:-"/etc/monit/monitrc"}
OMV_MONIT_SERVICE_FILESYSTEM_SPACEUSAGE=${OMV_MONIT_SERVICE_FILESYSTEM_SPACEUSAGE:-"80"}

if [ "$(omv_config_get "//system/notification/notifications/monitfilesystems")" = "1" ]; then
	# Monitor root filesystem.
	cat <<EOF >> ${OMV_MONIT_CONFIG}
# Alert if disk space of root filesystem gets low
check filesystem rootfs with path /
  if space usage > ${OMV_MONIT_SERVICE_FILESYSTEM_SPACEUSAGE}% for 5 times within 15 cycles
    then alert else if succeeded for 10 cycles then alert

EOF

	# Monitor mounted filesystems.
	xmlstarlet sel -t \
	  -m "//system/fstab/mntent[not(contains(opts,'bind') or contains(opts,'loop'))]" \
		-v uuid \
		-i "position() != last()" -n -b \
	  -b \
	  ${OMV_CONFIG_FILE} | xmlstarlet unesc |
	  while read uuid; do
		  fsname=$(omv_config_get "//system/fstab/mntent[uuid='${uuid}']/fsname")
		  dir=$(omv_config_get "//system/fstab/mntent[uuid='${uuid}']/dir")
		  # Try to get an unique block special device.
		  path=${fsname}
		  # Check if we are processing a filesystem UUID.
		  if omv_isfsuuid "${fsname}"; then
			  path="/dev/disk/by-uuid/${path}"
			  if [ ! -b "${path}" ]; then
				  # Find the device containing the filesystem.
				  path=$(findfs UUID=${fsname})
				  # Monit in Debian Squeeze does not like symbolic links, see
				  # http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=617259.
				  # Use the filesystem's mount point in this case.
				  if [ -h "${path}" ]; then
					  path=${dir}
				  fi
			  fi
		  fi
		  # Try to generate a unique identifier.
		  fscheckname=$(echo "fs${path}" | tr "/" "_")
		  progcheckname=$(echo "mp${dir}" | tr "/" "_")
		  cat <<EOF >> ${OMV_MONIT_CONFIG}
# Alert if filesystem is missing or disk space gets low
check filesystem ${fscheckname} with path ${path}
  if space usage > ${OMV_MONIT_SERVICE_FILESYSTEM_SPACEUSAGE}% for 5 times within 15 cycles
	then alert else if succeeded for 10 cycles then alert
#Check requires monit 5.4 (included in Wheezy).
#check program ${progcheckname} with path "mountpoint -q '${dir}'"
#  if status == 1 then alert

EOF
	  done
fi
