#!/usr/bin/env python3
#
# This file is part of OpenMediaVault.
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @copyright Copyright (c) 2009-2014 Volker Theile
#
# OpenMediaVault is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# OpenMediaVault is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.

import sys
import apt
import apt_pkg
import json
import re
import openmediavault

pi = openmediavault.ProductInfo()

class OpenMediaVaultPluginsFilter(apt.cache.Filter):
	def apply(self, pkg):
		m = re.match(r"^%s-(\S+)$" % pi.getPackageName(), pkg.name)
		if not m:
			return False
		if m.group(1) == "keyring":
			return False
		return True

cache = apt.cache.Cache()

# Create the '/var/lib/openmediavault/apt/upgradeindex.json' file.
print("Creating index of upgradeable packages ...")
data = []
cache.upgrade(True)
for pkg in cache.get_changes():
	repository = ""
	if pkg.candidate.origins:
		repository = "%s/%s" % (pkg.candidate.origins[0].label,
			pkg.candidate.origins[0].archive)
	data.append({
		"name": pkg.name,
		"oldversion": pkg.installed.version,
		"repository": repository,
		"package": pkg.candidate.record.get("Package"),
		"source": pkg.candidate.source_name,
		"sourceversion": pkg.candidate.source_version,
		"version": pkg.candidate.version,
		"installedsize": pkg.candidate.size,
		"maintainer": pkg.candidate.record.get("Maintainer", ""),
		"architecture": pkg.candidate.architecture,
		"depends": pkg.candidate.record.get("Depends", ""),
		"suggests": pkg.candidate.record.get("Suggests", ""),
		"conflicts": pkg.candidate.record.get("Conflicts", ""),
		"breaks": pkg.candidate.record.get("Breaks", ""),
		"abstract": pkg.candidate.summary, # Deprecated
		"summary": pkg.candidate.summary,
		"description": pkg.candidate.record.get("Description", ""),
		"homepage": pkg.candidate.homepage,
		"descriptionmd5": pkg.candidate.record.get("Description-md5", ""),
		"multiarch": pkg.candidate.record.get("Multi-Arch", ""),
		"predepends": pkg.candidate.record.get("Pre-Depends", ""),
		"section": pkg.candidate.section,
		"priority": pkg.candidate.priority,
		"filename": pkg.candidate.filename,
		"size": pkg.candidate.size,
		"md5sum": pkg.candidate.md5,
		"sha1": pkg.candidate.sha1,
		"sha256": pkg.candidate.sha256,
		"uri": pkg.candidate.uri,
		"uris": pkg.candidate.uris
	})
with open(openmediavault.APT_UPGRADE_INDEX_FILE, "w") as outfile:
	json.dump(data, outfile, sort_keys=True, indent=4)

# Create the '/var/lib/openmediavault/apt/pluginsindex.json' file.
print("Creating index of %s plugins ..." % pi.getName())
data = []
cache = apt.cache.Cache()
fcache = apt.cache.FilteredCache(cache)
fcache.set_filter(OpenMediaVaultPluginsFilter())
for pkg in fcache:
	repository = ""
	if pkg.candidate.origins:
		repository = "%s/%s" % (pkg.candidate.origins[0].label,
			pkg.candidate.origins[0].archive)
	data.append({
		"name": pkg.name,
		"repository": repository,
		"package": pkg.candidate.record.get("Package"),
		"version": pkg.candidate.version,
		"installedsize": pkg.candidate.size,
		"maintainer": pkg.candidate.record.get("Maintainer", ""),
		"architecture": pkg.candidate.architecture,
		"depends": pkg.candidate.record.get("Depends", ""),
		"suggests": pkg.candidate.record.get("Suggests", ""),
		"conflicts": pkg.candidate.record.get("Conflicts", ""),
		"breaks": pkg.candidate.record.get("Breaks", ""),
		"abstract": pkg.candidate.summary, # Deprecated
		"summary": pkg.candidate.summary,
		"description": pkg.candidate.record.get("Description", ""),
		"homepage": pkg.candidate.homepage,
		"descriptionmd5": pkg.candidate.record.get("Description-md5", ""),
		"multiarch": pkg.candidate.record.get("Multi-Arch", ""),
		"predepends": pkg.candidate.record.get("Pre-Depends", ""),
		"section": pkg.candidate.section,
		"priority": pkg.candidate.priority,
		"filename": pkg.candidate.filename,
		"size": pkg.candidate.size,
		"md5sum": pkg.candidate.md5,
		"sha1": pkg.candidate.sha1,
		"sha256": pkg.candidate.sha256,
		"installed": pkg.is_installed
	})
with open(openmediavault.APT_PLUGINS_INDEX_FILE, "w") as outfile:
	json.dump(data, outfile, sort_keys=True, indent=4)

sys.exit(0)
